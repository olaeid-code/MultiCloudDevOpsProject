pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = 'docker.io/olaeid'
        OPENSHIFT_SERVER = 'https://api.ocpuat.devopsconsulting.org:6443'
        DOCKER_IMAGE = 'spring-boot-app:latest'
        APP_SERVICE_NAME = 'spring-boot-app'
        APP_PORT = '8080'
        APP_HOST_NAME = 'spring-boot-app.apps.ocpuat.devopsconsulting.org'
        MAIN_BRANCH = 'main'
    }
    
    stages {
        stage('Checkout') {
            steps {
                // Checkout code from the GitHub repository
                script {
                    git branch: 'main' , url: 'https://github.com/EngMohamedElEmam/spring-boot-app.git'
                }
            }
        }
        
        stage('Build') {
           
            
                steps {
                    sh './gradlew build'
                    sh 'docker build -t EngMohamedElEmam/spring-boot-app .'
                }
            
        }
        
        stage('Unit Tests') {
            steps {
                script {
                    // Build and run unit tests
                    sh './gradlew clean build'
                }
            }
        }
        
        stage('SonarQube test') {
            steps {
                withSonarQubeEnv('sonar-test') {
                    // Run SonarQube analysis
                    sh 'sonar-scanner'
                    sh './gradlew sonarqube'
                }
            }
        }

        
        
        stage('Push to Docker Hub') { 
            steps {
                // Push the Docker image to Docker Hub
                script {
                    withCredentials([usernamePassword(credentialsId: 'hubdocker', usernameVariable: 'DOCKER_REGISTRY_USERNAME', passwordVariable: 'DOCKER_REGISTRY_PASSWORD')]) {
                        sh "echo \${DOCKER_REGISTRY_PASSWORD} | docker login -u \${DOCKER_REGISTRY_USERNAME} --password-stdin"
                        sh "docker tag EngMohamedElEmam/spring-boot-app:latest olaeid/spring-boot-app:latest"
                        sh "docker push olaeid/spring-boot-app:latest"
                    }
                }
        }    }

        stage('Deploy to OpenShift') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'open-shift', variable: 'config')]) {
                    sh "oc login -u ola -p ola"
                    }
                    sh "oc project project1"
                    sh "oc new-app \${DOCKER_REGISTRY}/${DOCKER_IMAGE}"
                    sh "oc create route edge --service \${APP_SERVICE_NAME} --port \${APP_PORT} --hostname \${APP_HOST_NAME} --insecure-policy Redirect"
                }
            }
        }


        
    }   }

